        -:    0:Source:hw.c
        -:    0:Graph:hwX-hw.gcno
        -:    0:Data:hwX-hw.gcda
        -:    0:Runs:3
        -:    1:// Mehmet Nadi 56102231
        -:    2:// Khoi Pham 91404433
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <limits.h>
        -:    7:
        -:    8:#define PAGE_SIZE 8
        -:    9:#define VM_SIZE 128
        -:   10:#define VM_PAGE_COUNT 16 // also equals to page table's size
        -:   11:#define MM_SIZE 32
        -:   12:#define MM_PAGE_COUNT 4
        -:   13:
        -:   14:int timer = 0;
        -:   15:struct PageTableEntry
        -:   16:{
        -:   17:    int valid_bit;
        -:   18:    int dirty_bit;
        -:   19:    int physical_page_number;
        -:   20:    int loaded_to_main_mem_time; // For FIFO
        -:   21:    int last_access_time;        // For LRU
        -:   22:};
        -:   23:
        6:   24:void init_memory(int *memory, int size, int value)
        -:   25:{
      486:   26:    for (int i = 0; i < size; i++)
        -:   27:    {
      480:   28:        memory[i] = value;
        -:   29:    }
        6:   30:}
        -:   31:
        3:   32:void init_page_table(struct PageTableEntry *page_table, int size)
        -:   33:{
       51:   34:    for (int i = 0; i < size; i++)
        -:   35:    {
       48:   36:        page_table[i].valid_bit = 0;
       48:   37:        page_table[i].dirty_bit = 0;
       48:   38:        page_table[i].physical_page_number = i;
       48:   39:        page_table[i].loaded_to_main_mem_time = 0;
       48:   40:        page_table[i].last_access_time = timer;
        -:   41:    }
        3:   42:}
        -:   43:
       78:   44:int calc_physical_address(int physical_page_number, int offset)
        -:   45:{
       78:   46:    int physical_address = physical_page_number * PAGE_SIZE + offset;
      78*:   47:    return (physical_page_number < VM_PAGE_COUNT) ? physical_address : -1;
        -:   48:}
        -:   49:
       60:   50:int find_empty_page_in_main_mem(struct PageTableEntry *page_table)
        -:   51:{
       60:   52:    int main_mem_page_in_use[MM_PAGE_COUNT] = {0};
     1020:   53:    for (int i = 0; i < VM_PAGE_COUNT; i++) // VM_PAGE_COUNT = page table's size
        -:   54:    {
      960:   55:        if (page_table[i].valid_bit == 1)
        -:   56:        {
      210:   57:            main_mem_page_in_use[page_table[i].physical_page_number] = 1;
        -:   58:        }
        -:   59:    }
      270:   60:    for (int i = 0; i < MM_PAGE_COUNT; i++)
        -:   61:    {
      222:   62:        if (main_mem_page_in_use[i] == 0)
        -:   63:        {
       12:   64:            return i;
        -:   65:        }
        -:   66:    }
       48:   67:    return -1;
        -:   68:}
        -:   69:
       32:   70:int find_page_to_evict_fifo(struct PageTableEntry *page_table)
        -:   71:{
       32:   72:    int victim_virtual_page_number = -1;
       32:   73:    int earliest_loaded_in_main_mem_time = timer + 1;
      544:   74:    for (int i = 0; i < VM_PAGE_COUNT; i++) // VM_PAGE_COUNT = page table's size
        -:   75:    {
      512:   76:        if (page_table[i].valid_bit == 1 && page_table[i].loaded_to_main_mem_time < earliest_loaded_in_main_mem_time)
        -:   77:        {
       46:   78:            victim_virtual_page_number = i;
       46:   79:            earliest_loaded_in_main_mem_time = page_table[i].loaded_to_main_mem_time;
        -:   80:        }
        -:   81:    }
       32:   82:    return victim_virtual_page_number;
        -:   83:}
        -:   84:
       16:   85:int find_page_to_evict_lru(struct PageTableEntry *page_table)
        -:   86:{
       16:   87:    int victim_virtual_page_number = -1;
       16:   88:    int earliest_access_time = timer + 1;
      272:   89:    for (int i = 0; i < VM_PAGE_COUNT; i++) // VM_PAGE_COUNT = page table's size
        -:   90:    {
      256:   91:        if (page_table[i].valid_bit == 1 && page_table[i].last_access_time < earliest_access_time) // has to be valid_bit |||| fifo: first_el.last_access_time always the least
        -:   92:        {
       21:   93:            victim_virtual_page_number = i;
       21:   94:            earliest_access_time = page_table[i].last_access_time;
        -:   95:        }
        -:   96:    }
       16:   97:    return victim_virtual_page_number;
        -:   98:}
        -:   99:
       60:  100:void load_page(struct PageTableEntry *page_table, int *disk_memory, int *main_memory, int virtual_page_number, int replacement_algorithm)
        -:  101:{
       60:  102:    int victim_physical_page_number = find_empty_page_in_main_mem(page_table);
       60:  103:    if (victim_physical_page_number == -1) // no available space in RAM.
        -:  104:    {
       48:  105:        int victim_virtual_page_number = -1;
       48:  106:        if (replacement_algorithm == 0)
        -:  107:        {
       32:  108:            victim_virtual_page_number = find_page_to_evict_fifo(page_table);
        -:  109:        }
        -:  110:        else
        -:  111:        {
       16:  112:            victim_virtual_page_number = find_page_to_evict_lru(page_table);
        -:  113:        }
       48:  114:        victim_physical_page_number = page_table[victim_virtual_page_number].physical_page_number;
       48:  115:        if (page_table[victim_virtual_page_number].dirty_bit) // update disk bc file editted
        -:  116:        {
       81:  117:            for (int i = 0; i < PAGE_SIZE; i++)
        -:  118:            {
       72:  119:                memcpy(&disk_memory[victim_virtual_page_number * PAGE_SIZE + i], &main_memory[victim_physical_page_number * PAGE_SIZE + i], sizeof(int));
        -:  120:            }
        9:  121:            page_table[victim_virtual_page_number].dirty_bit = 0;
        -:  122:        }
       48:  123:        page_table[victim_virtual_page_number].valid_bit = 0;
       48:  124:        page_table[victim_virtual_page_number].physical_page_number = victim_virtual_page_number;
       48:  125:        page_table[victim_virtual_page_number].loaded_to_main_mem_time = 0;
       48:  126:        page_table[victim_virtual_page_number].last_access_time = 0;
        -:  127:    }
        -:  128:
      540:  129:    for (int i = 0; i < PAGE_SIZE; i++)
        -:  130:    {
      480:  131:        memcpy(&main_memory[victim_physical_page_number * PAGE_SIZE + i], &disk_memory[virtual_page_number * PAGE_SIZE + i], sizeof(int)); // load file to RAM
        -:  132:    }
       60:  133:    page_table[virtual_page_number].valid_bit = 1;
       60:  134:    page_table[virtual_page_number].dirty_bit = 0;
       60:  135:    page_table[virtual_page_number].physical_page_number = victim_physical_page_number;
       60:  136:    page_table[virtual_page_number].loaded_to_main_mem_time = timer;
       60:  137:}
        -:  138:
       57:  139:void read_memory(struct PageTableEntry *page_table, int *disk_memory, int *main_memory, int virtual_address, int replacement_algorithm)
        -:  140:{
       57:  141:    int virtual_page_number = virtual_address / PAGE_SIZE;
       57:  142:    int offset = virtual_address % PAGE_SIZE;
       57:  143:    if (page_table[virtual_page_number].valid_bit == 0)
        -:  144:    {
       48:  145:        printf("A Page Fault Has Occurred\n");
       48:  146:        load_page(page_table, disk_memory, main_memory, virtual_page_number, replacement_algorithm);
        -:  147:    }
       57:  148:    int physical_page_number = page_table[virtual_page_number].physical_page_number;
       57:  149:    int physical_address = calc_physical_address(physical_page_number, offset);
        -:  150:
       57:  151:    page_table[virtual_page_number].last_access_time = timer; // Update access time
       57:  152:    printf("%d\n", main_memory[physical_address]);
       57:  153:}
        -:  154:
       21:  155:void write_memory(struct PageTableEntry *page_table, int *disk_memory, int *main_memory, int virtual_address, int data, int replacement_algorithm)
        -:  156:{
       21:  157:    int virtual_page_number = virtual_address / PAGE_SIZE;
       21:  158:    int offset = virtual_address % PAGE_SIZE;
       21:  159:    if (page_table[virtual_page_number].valid_bit == 0)
        -:  160:    {
       12:  161:        printf("A Page Fault Has Occurred\n");
       12:  162:        load_page(page_table, disk_memory, main_memory, virtual_page_number, replacement_algorithm);
        -:  163:    }
       21:  164:    int physical_page_number = page_table[virtual_page_number].physical_page_number;
       21:  165:    int physical_address = calc_physical_address(physical_page_number, offset);
        -:  166:
       21:  167:    main_memory[physical_address] = data;
       21:  168:    page_table[virtual_page_number].dirty_bit = 1;
       21:  169:    page_table[virtual_page_number].last_access_time = timer; // Update access time
       21:  170:}
        -:  171:
       12:  172:void showptable(struct PageTableEntry *page_table)
        -:  173:{
      204:  174:    for (int i = 0; i < VM_PAGE_COUNT; i++) // VM_PAGE_COUNT = page table's size
        -:  175:    {
      192:  176:        printf("%d:%d:%d:%d\n", i, page_table[i].valid_bit, page_table[i].dirty_bit, page_table[i].physical_page_number);
        -:  177:    }
       12:  178:}
        -:  179:
       12:  180:void showmain(int *main_memory, int physical_page_number)
        -:  181:{
       12:  182:    if (physical_page_number < MM_PAGE_COUNT)
        -:  183:    {
       81:  184:        for (int i = 0; i < PAGE_SIZE; i++)
        -:  185:        {
       72:  186:            printf("%d: %d\n", physical_page_number * PAGE_SIZE + i, main_memory[physical_page_number * PAGE_SIZE + i]);
        -:  187:        }
        -:  188:    }
       12:  189:}
        -:  190:
        3:  191:int main(int argc, char *argv[])
        -:  192:{
        3:  193:    int replacement_algorithm = 0; // FIFO = 0, LRU = 1
        3:  194:    if (argc > 2 && strcmp(argv[2], "LRU") == 0)
        -:  195:    {
        1:  196:        replacement_algorithm = 1;
        -:  197:    }
        -:  198:
        -:  199:    int main_memory[MM_SIZE];
        -:  200:    int disk_memory[VM_SIZE];
        -:  201:    struct PageTableEntry page_table[VM_PAGE_COUNT]; // VM_PAGE_COUNT = page table's size
        -:  202:
        3:  203:    init_memory(main_memory, MM_SIZE, -1);
        3:  204:    init_memory(disk_memory, VM_SIZE, -1);
        3:  205:    init_page_table(page_table, VM_PAGE_COUNT); // VM_PAGE_COUNT = page table's size
        -:  206:
        -:  207:    char command[10];
        -:  208:    int virtual_address;
        -:  209:    int data;
        -:  210:    while (1)
        -:  211:    {
      111:  212:        scanf("%s", command);
      111:  213:        if (strcmp(command, "quit") == 0)
        -:  214:        {
        3:  215:            break;
        -:  216:        }
      108:  217:        else if (strcmp(command, "read") == 0)
        -:  218:        {
       60:  219:            scanf("%d", &virtual_address);
       60:  220:            if (virtual_address < 0 || virtual_address >= VM_SIZE)
        -:  221:            {
        3:  222:                printf("Invalid virtual address\n");
        -:  223:            }
        -:  224:            else
        -:  225:            {
       57:  226:                read_memory(page_table, disk_memory, main_memory, virtual_address, replacement_algorithm);
        -:  227:            }
        -:  228:        }
       48:  229:        else if (strcmp(command, "write") == 0)
        -:  230:        {
       24:  231:            scanf("%d %d", &virtual_address, &data);
       24:  232:            if (virtual_address < 0 || virtual_address >= VM_SIZE)
        -:  233:            {
        3:  234:                printf("Invalid virtual address\n");
        -:  235:            }
        -:  236:            else
        -:  237:            {
       21:  238:                write_memory(page_table, disk_memory, main_memory, virtual_address, data, replacement_algorithm);
        -:  239:            }
        -:  240:        }
       24:  241:        else if (strcmp(command, "showptable") == 0)
        -:  242:        {
       12:  243:            showptable(page_table);
        -:  244:        }
       12:  245:        else if (strcmp(command, "showmain") == 0)
        -:  246:        {
        -:  247:            int physical_page_number;
       12:  248:            scanf("%d", &physical_page_number);
       12:  249:            showmain(main_memory, physical_page_number);
        -:  250:        }
      108:  251:        timer++;
        -:  252:    }
        -:  253:
        3:  254:    return 0;
        -:  255:}
